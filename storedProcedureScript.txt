--add_Person
/*
ALTER procedure [dbo].[add_Person]
(@_name nvarchar(50),
 @_surname nvarchar(50),
 @_SourceBalance float  
 )
 as
 Begin
   
    Begin try
       begin transaction
	   declare @_interest float;
	   set @_interest = @_SourceBalance*0.02;
       insert into dbo.Person
       values(@_name, @_surname, @_SourceBalance, @_interest, CONVERT(datetime2(7),GETDATE())) 
	   commit transaction
    end try
	
    begin catch
	if(@@TRANCOUNT>0)
	Rollback transaction;
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    end catch

 End
*/

-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------


--delete_Person
/*
ALTER procedure [dbo].[delete_Person](
 @_ID int
 ) 
 as
 begin
   begin try
   begin transaction
   delete from dbo.SavingAccount where PersonID = @_ID;
   delete from dbo.Person where ID = @_ID;
   commit transaction;
   end try

   begin catch
   if(@@TRANCOUNT>0)
   rollback transaction;
   DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
   end catch
 end
*/

-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------

--update_Person
/*
ALTER procedure [dbo].[update_Person]
(
 @_personId INT,
  @_newName NVARCHAR(50)=null,
  @_newSurname NVARCHAR(50)=null,
  @_newSourceBalance FLOAT=null
 )
 as
 Begin
   
    Begin try
       begin transaction	   
	   update dbo.Person
	   set 
	   name    =  IsNull(@_newName, name),
	   surname =  IsNull(@_newSurname, surname),
	   SourceBalance = IsNull(@_newSourceBalance, SourceBalance),
	   interest = IsNull(@_newSourceBalance, SourceBalance)*0.02,
	   LastProcessDate = CONVERT(datetime2(7),GETDATE())	  
	   where ID = @_personId;	   
	   commit transaction
    end try
	
    begin catch
	if(@@TRANCOUNT>0)
	Rollback transaction;
	DECLARE @ErrorMessage NVARCHAR(4000);
    DECLARE @ErrorSeverity INT;
    DECLARE @ErrorState INT;
    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE();
    RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    end catch

 End
*/

-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------

--Triggers 
-----------------------------------------------------------------------------------
-- add_Saving_Account
-- this trigger automatically inserts data into dbo.SavingAccount from dbo.Person
/*
ALTER TRIGGER [dbo].[add_Saving_Account]    
   on [dbo].[Person] 
   AFTER Insert 
AS 
BEGIN
	declare @PersonID int;
	declare @CurrentBalance float;

	set @PersonID= (select top 1 ID	from Person  
	order by Id desc);

	set @CurrentBalance = (select top 1 SourceBalance + interest from Person 
	order by Id desc)
	

	insert into SavingAccount
	values(@CurrentBalance ,@PersonID);
END
*/

-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------

-- update_Saving_Account
-- this trigger automatically updates tho according data in the SavingAccount which Person was updated
/*
ALTER TRIGGER [dbo].[update_Saving_Account]    
   on [dbo].[Person] 
   AFTER Update 
AS 
BEGIN

	declare @PersonID int;
	declare @CurrentBalance float;

	set @PersonID= (select top 1 ID from Person pr order by pr.LastProcessDate desc);
	set @CurrentBalance = (select top 1 pr.SourceBalance+pr.interest from Person pr order by pr.LastProcessDate desc)
	

	update SavingAccount
	set CurrentBalance = @CurrentBalance
	where PersonID = @PersonID;


END
*/ 
























